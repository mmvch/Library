// <auto-generated />
using System;
using Library.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.DAL.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Library.Domain.Models.BookText", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Library.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5e7f84a-685f-429b-ae38-9b44e067d76a"),
                            Name = "author"
                        },
                        new
                        {
                            Id = new Guid("2949d456-901a-4f7b-a7a3-7fd1e8c2f65d"),
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("630313d4-d313-4fa8-bb0e-bfce2dcb26b9"),
                            Login = "admin",
                            PasswordHash = new byte[] { 61, 142, 96, 149, 45, 243, 53, 28, 245, 194, 163, 124, 21, 204, 62, 183, 57, 193, 123, 209, 68, 5, 240, 149, 55, 127, 10, 197, 64, 49, 218, 79, 86, 14, 145, 231, 198, 243, 132, 173, 199, 152, 162, 92, 163, 157, 108, 185, 204, 207, 186, 231, 216, 74, 247, 3, 167, 106, 126, 68, 96, 128, 111, 12 },
                            PasswordSalt = new byte[] { 130, 17, 255, 118, 250, 76, 61, 237, 130, 77, 45, 221, 254, 85, 95, 154, 231, 66, 2, 202, 102, 152, 71, 52, 68, 153, 248, 209, 174, 162, 62, 71, 179, 248, 39, 88, 116, 11, 55, 195, 5, 21, 184, 190, 165, 224, 41, 84, 37, 183, 161, 184, 218, 194, 13, 161, 215, 132, 255, 44, 152, 185, 169, 101, 245, 198, 190, 151, 51, 78, 223, 163, 224, 17, 19, 248, 237, 156, 89, 135, 210, 170, 225, 58, 106, 227, 93, 79, 119, 33, 109, 39, 137, 143, 177, 192, 193, 160, 223, 182, 227, 122, 29, 240, 132, 112, 70, 168, 164, 71, 113, 78, 239, 251, 153, 99, 223, 1, 242, 27, 68, 78, 142, 79, 79, 97, 184, 57 }
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("2949d456-901a-4f7b-a7a3-7fd1e8c2f65d"),
                            UserId = new Guid("630313d4-d313-4fa8-bb0e-bfce2dcb26b9")
                        });
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.HasOne("Library.Domain.Models.User", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Models.BookText", b =>
                {
                    b.HasOne("Library.Domain.Models.Book", "Book")
                        .WithOne("BookText")
                        .HasForeignKey("Library.Domain.Models.BookText", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library.Domain.Models.UserRole", b =>
                {
                    b.HasOne("Library.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.Models.Book", b =>
                {
                    b.Navigation("BookText")
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.Models.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
